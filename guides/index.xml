<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Guides on recogito.github.io</title>
    <link>http://recogito.github.io/guides/</link>
    <description>Recent content in Guides on recogito.github.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 01 May 2020 13:28:19 +0200</lastBuildDate><atom:link href="http://recogito.github.io/guides/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Configuring the Editor</title>
      <link>http://recogito.github.io/guides/configuring-the-editor/</link>
      <pubDate>Thu, 24 Sep 2020 14:24:22 +0200</pubDate>
      
      <guid>http://recogito.github.io/guides/configuring-the-editor/</guid>
      <description>Customizing the Editor Per default, the Annotorious editor popup features two widgets:
A comment widget for writing comments and replies A tag widget for adding tags, either freetext or supported by a pre-configured vocabulary and an autosuggest dropdown You can can customize this setup when you initialize Annotorious/RecogitoJS using the widgets config option. The configuration below will give you the editor shown in the image above.
var anno = Annotorious.init({ image: &amp;#39;hallstatt&amp;#39;, widgets: [ &amp;#39;COMMENT&amp;#39;, { widget: &amp;#39;TAG&amp;#39;, vocabulary: [ &amp;#39;Animal&amp;#39;, &amp;#39;Building&amp;#39;, &amp;#39;Waterbody&amp;#39;] } ] }); Alternatively, the configuration below will give you an editor with just a comment widget, but no tag widget.</description>
    </item>
    
    <item>
      <title>Customizing Styles</title>
      <link>http://recogito.github.io/guides/customizing-styles/</link>
      <pubDate>Thu, 24 Sep 2020 10:47:22 +0200</pubDate>
      
      <guid>http://recogito.github.io/guides/customizing-styles/</guid>
      <description>Customizing Visual Appearance Need a different look and feel? Customizing the visual appearance of Annotorious is easy. All elements of the annotation layer and the editor popup can be styled with CSS.
Customizing Shape Styles Annotorious renders annotations using SVG. You can completely alter the visual appearance of every graphical element via CSS.
To make styling more flexible, Annotorious adds a few extras:
For every annotation shape, Annotorious renders two SVG shapes, exactly on top of each other.</description>
    </item>
    
    <item>
      <title>Headless Mode</title>
      <link>http://recogito.github.io/guides/headless-mode/</link>
      <pubDate>Sat, 03 Apr 2021 10:28:42 +0200</pubDate>
      
      <guid>http://recogito.github.io/guides/headless-mode/</guid>
      <description>Headless Mode: Using Annotorious without the Editor Popup Want to use Annotorious only for the drawing tools? But don&amp;rsquo;t need the editor? That&amp;rsquo;s what headless mode is for! In headless mode, you keep all the standard functionality: drawing and editing shapes, JavaScript API, lifecycle events. But you are free to build your own user interface, without being forced to the standard editor popup.
The demo uses headless mode to create annotations with either an Orange or Green tag, and a formatter to color the shapes.</description>
    </item>
    
    <item>
      <title>Annotorious in Vue</title>
      <link>http://recogito.github.io/guides/annotorious-in-vue/</link>
      <pubDate>Sun, 18 Sep 2022 08:54:00 +0200</pubDate>
      
      <guid>http://recogito.github.io/guides/annotorious-in-vue/</guid>
      <description>Using Annotorious in Vue.js Below is a minimal example for using Annotorious in Vue.js. Thanks to Grant Brits for this contribution!
&amp;lt;template&amp;gt; &amp;lt;div&amp;gt; &amp;lt;img id=&amp;#34;plan&amp;#34; src=&amp;#34;img.png&amp;#34; style=&amp;#34;width: 100%; max-width: 1024px;&amp;#34; /&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/template&amp;gt; &amp;lt;script&amp;gt; import { Annotorious} from &amp;#39;@recogito/annotorious&amp;#39;; import &amp;#39;@recogito/annotorious/dist/annotorious.min.css&amp;#39;; export default { data() { return { anno: null } }, methods: { initAnno() { this.anno = new Annotorious({ image: document.getElementById(&amp;#34;plan&amp;#34;) }); this.anno.on(&amp;#39;createAnnotation&amp;#39;, function (annotation) { console.log(&amp;#39;Created annotation&amp;#39;, annotation); }); this.</description>
    </item>
    
    <item>
      <title>Annotorious in React</title>
      <link>http://recogito.github.io/guides/annotorious-in-react/</link>
      <pubDate>Sun, 25 Apr 2021 16:45:12 +0200</pubDate>
      
      <guid>http://recogito.github.io/guides/annotorious-in-react/</guid>
      <description>Using Annotorious in React At the moment, Annotorious doesn&amp;rsquo;t have native React integration (yet). If you want to use Annotorious in your own React project, there are a few things to consider:
Annotorious modifies the DOM directly: you need to use refs to access image DOM elements. Annotorious has an imperative API: wrapping it for React requires a few workarounds, including initialization in a useEffect hook, and storing the anno object in the component state.</description>
    </item>
    
    <item>
      <title>Firebase Storage Plugin</title>
      <link>http://recogito.github.io/guides/using-firebase-for-storage/</link>
      <pubDate>Fri, 01 May 2020 13:28:54 +0200</pubDate>
      
      <guid>http://recogito.github.io/guides/using-firebase-for-storage/</guid>
      <description>Using Firebase for Storage A quick and easy way to set up your own annotation store without managing your own server is through Firebase, a web application development platform by Google. Firebase includes a cloud-based document database with a JavaScript SDK for storing, updating and deleting JSON records. All you need to do is wire up the Firebase storage SDK operations with the corresponding events from Annotorious.
Firebase Storage Explained: Lifecycle Events &amp;amp; CRUD Operations The basic idea behind integrating Firebase is:</description>
    </item>
    
    <item>
      <title>Writing Editor Widgets</title>
      <link>http://recogito.github.io/guides/editor-widgets/</link>
      <pubDate>Thu, 24 Sep 2020 14:24:22 +0200</pubDate>
      
      <guid>http://recogito.github.io/guides/editor-widgets/</guid>
      <description>Writing Your Own Editor Widgets You can extend the editor with your own widgets. A widget can be:
an ordinary JavaScript function that takes a set of input arguments and returns a DOM element, which will be inserted into the editor a React component conforming to the same interface conventions as the built-in widgets. Before you start writing your own widgets, you should first familiarize yourself with the the W3C Web Annotation specification, in particular the concepts of annotation bodies and body purposes.</description>
    </item>
    
    <item>
      <title>React Editor Widget</title>
      <link>http://recogito.github.io/guides/example-react-widget/</link>
      <pubDate>Sat, 20 Feb 2021 10:28:42 +0200</pubDate>
      
      <guid>http://recogito.github.io/guides/example-react-widget/</guid>
      <description>An Example React Editor Widget In this guide, we re-recreate the example color selector widget from the previous tutorial as a React component. The widget adds a section to the editor with three buttons: red, green and blue. Clicking one of the buttons will set an annotation body with the color value, and body purpose of highlighting.
JSX code for the plugin is below. A full project (including a webpack build configuration) is available on GitHub.</description>
    </item>
    
    <item>
      <title>Contributing Translations</title>
      <link>http://recogito.github.io/guides/contributing-ui-translations/</link>
      <pubDate>Mon, 01 Jun 2020 20:04:18 +0200</pubDate>
      
      <guid>http://recogito.github.io/guides/contributing-ui-translations/</guid>
      <description>Contributing UI Translations We want to make the user interface available in as many languages as possible. If you want to help: providing a translation is easy - and because there are not many labeled elements, it&amp;rsquo;s not a lot of work.
Message Dictionaries User interface labels are part of recogito-client-core, a JavaScript package for common code shared between Annotorious and RecogitoJS. In this folder you will find messages files, one file for each available translation.</description>
    </item>
    
    <item>
      <title>Hacker&#39;s Guide</title>
      <link>http://recogito.github.io/guides/hackers-guide/</link>
      <pubDate>Thu, 04 Jun 2020 11:46:22 +0200</pubDate>
      
      <guid>http://recogito.github.io/guides/hackers-guide/</guid>
      <description>Hacker&amp;rsquo;s Guide to Annotorious and RecogitoJS We welcome pull requests to Annotorious and RecogitoJS - both to the code, as well as to our documentation! To contribute, simply fork the relevant repository and hack away. Our code is located in the following repositories
recogito/annotorious. Annotorious application entry point, SVG rendering and drawing tool base classes. recogito/annotorious-openseadragon. The OpenSeadragon plugin. Imports most functionality from annotorious and recogito-client-core. recogito/recogito-client-core. A base module that contains shared code for Annotorious and RecogitoJS, most importantly the code for the editor popup.</description>
    </item>
    
  </channel>
</rss>
