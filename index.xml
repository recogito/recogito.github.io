<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>recogito.github.io</title>
    <link>http://recogito.github.io/</link>
    <description>Recent content on recogito.github.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 24 Sep 2020 14:24:22 +0200</lastBuildDate><atom:link href="http://recogito.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Using Firebase Storage</title>
      <link>http://recogito.github.io/guides/using-firebase-for-storage/</link>
      <pubDate>Fri, 01 May 2020 13:28:54 +0200</pubDate>
      
      <guid>http://recogito.github.io/guides/using-firebase-for-storage/</guid>
      <description>Using Firebase for Storage A quick and easy way to set up your own annotation store without managing your own server is through Firebase, a web application development platform by Google. Firebase includes a cloud-based document database with a JavaScript SDK for storing, updating and deleting JSON records. All you need to do is wire up the Firebase storage SDK operations with the corresponding events from Annotorious.
Annotorious Lifecycle Events When Annotorious fires the createAnnotation event, store the annotation via the .</description>
    </item>
    
    <item>
      <title>Extending the Editor</title>
      <link>http://recogito.github.io/guides/extending-the-editor/</link>
      <pubDate>Thu, 24 Sep 2020 14:24:22 +0200</pubDate>
      
      <guid>http://recogito.github.io/guides/extending-the-editor/</guid>
      <description>Extending the Editor Per default, the Annotorious/RecogitoJS editor popup features two widgets:
 A comment widget for writing comments and replies A tag widget for adding tags, either freetext or supported by a pre-configured vocabulary and an autosuggest dropdown  You can can customize this setup when you initialize Annotorious/RecogitoJS using the widgets config option. The configuration below will give you the editor shown in the image above.
var anno = Annotorious.</description>
    </item>
    
    <item>
      <title>OpenSeadragon Plugin</title>
      <link>http://recogito.github.io/annotorious/getting-started/osd-plugin/</link>
      <pubDate>Mon, 01 Jun 2020 10:20:00 +0200</pubDate>
      
      <guid>http://recogito.github.io/annotorious/getting-started/osd-plugin/</guid>
      <description>Getting Started with the OpenSeadragon Plugin The Annotorious OpenSeadragon plugin is an extension to the OpenSeadragon viewer for zoomable high-resolution images. Click or tap the annotation to edit. Hold the SHIFT key while clicking and dragging the mouse to create a new annotation.
 .openseadragon-canvas { outline:none; background-color:#f4f4f4 !important; border-radius:3px; }       var sampleAnnotation = { &#34;@context&#34;: &#34;http://www.w3.org/ns/anno.jsonld&#34;, &#34;id&#34;: &#34;#07475897-d2eb-4dce-aa12-ecb50771c734&#34;, &#34;type&#34;: &#34;Annotation&#34;, &#34;body&#34;: [{ &#34;type&#34;: &#34;</description>
    </item>
    
    <item>
      <title>Web Annotation Model</title>
      <link>http://recogito.github.io/annotorious/getting-started/web-annotation/</link>
      <pubDate>Sun, 17 May 2020 14:33:09 +0200</pubDate>
      
      <guid>http://recogito.github.io/annotorious/getting-started/web-annotation/</guid>
      <description>The W3C Web Annotation Model Annotorious supports a subset of the W3C Web Annotation model, an open standard for interoperable annotations.
 Only a single target shape per annotation is supported. FragmentSelectors of type Media Fragment are supported for rectangle shapes (see example below). SVG Selectors supported for polygon shapes. Annotation TextualBody types with a purpose of commenting, replying or no purpose are displayed as comments. Annotation bodies with a purpose of tagging are displayed as tags.</description>
    </item>
    
    <item>
      <title>Customizing Appearance</title>
      <link>http://recogito.github.io/guides/customizing-appearance/</link>
      <pubDate>Thu, 24 Sep 2020 10:47:22 +0200</pubDate>
      
      <guid>http://recogito.github.io/guides/customizing-appearance/</guid>
      <description>Customizing Visual Appearance Need a different look and feel? Customizing the visual appearance of Annotorious is easy! All elements of the annotation layer and the editor window can be styled with CSS.
Customizing the Annotation Layer Annotorious renders annotations using SVG, which means you can completely alter the visual appearance of every graphical element via CSS.
To make styling even more flexible, Annotorious adds a few extras:
 For every annotation shape, Annotorious renders two SVG shapes, exactly on top of each other.</description>
    </item>
    
    <item>
      <title>Contributing Translations</title>
      <link>http://recogito.github.io/guides/contributing-ui-translations/</link>
      <pubDate>Mon, 01 Jun 2020 20:04:18 +0200</pubDate>
      
      <guid>http://recogito.github.io/guides/contributing-ui-translations/</guid>
      <description>Contributing UI Translations We want to make our user interface available in as many languages as possible. If you want to help: providing a translation is easy - and because there are not many labeled elements, it&amp;rsquo;s not a lot of work.
Message Dictionaries The user interface labels are part of recogito-client-core, a JavaScript package for common code shared between Annotorious and RecogitoJS. In this folder you will find messages files, one file for each available translation.</description>
    </item>
    
    <item>
      <title>Storing Annotations</title>
      <link>http://recogito.github.io/annotorious/getting-started/storing-annotations/</link>
      <pubDate>Mon, 01 Jun 2020 10:20:00 +0200</pubDate>
      
      <guid>http://recogito.github.io/annotorious/getting-started/storing-annotations/</guid>
      <description>Storing Annotations Important: Annotorious does not provide a backend for storing annotations online. It provides user interface functionality only. To store annotations, you need to connect them to your own backend, using the JavaScript API.
When users create, update or delete annotations, Annotorious emits the following events:
 createAnnotation updateAnnotation deleteAnnotation  Subscribe to these events, and execute the corresponding write operations to your backend.
anno.on(&amp;#39;createAnnotation&amp;#39;, function(annotation) { // This part depends entirely on how your backend works  axios.</description>
    </item>
    
    <item>
      <title>Hacker&#39;s Guide</title>
      <link>http://recogito.github.io/guides/development-setup/</link>
      <pubDate>Thu, 04 Jun 2020 11:46:22 +0200</pubDate>
      
      <guid>http://recogito.github.io/guides/development-setup/</guid>
      <description>Hacker&amp;rsquo;s Guide to Annotorious and RecogitoJS We welcome pull requests to Annotorious and RecogitoJS - both to the code, as well as to our documentation! To contribute, simply fork the relevant repository and hack away. Our code is located in the following repositories
 recogito/recogito-client-core. A base module that contains most of the code for RecogitoJS, and all code that is shared between RecogitoJS and Annotorious. You&amp;rsquo;ll need this module if you want to hack anything about RecogitoJS (text selection, relationship drawing) or the common editor popup.</description>
    </item>
    
    <item>
      <title>Annotorious</title>
      <link>http://recogito.github.io/site/annotorious/</link>
      <pubDate>Fri, 12 Jun 2020 08:04:26 +0200</pubDate>
      
      <guid>http://recogito.github.io/site/annotorious/</guid>
      <description></description>
    </item>
    
    <item>
      <title>About</title>
      <link>http://recogito.github.io/annotorious/about/</link>
      <pubDate>Mon, 01 Jun 2020 17:48:46 +0200</pubDate>
      
      <guid>http://recogito.github.io/annotorious/about/</guid>
      <description>About Annotorious Annotorious is open source software licensed under the BSD 3-Clause license.
Source Code All source code is available on the recogito GitHub organization. The key repositories are:
 recogito/annotorious for the Annotorious standard version recogito/annotorious-openseadragon for the OpenSeadragon plugin recogito/recogito-client-core for shared base components  Need Help? Get in touch via our Annotorious Gitter chat. If you encounter bugs, or have feature requests, please report them via our GitHub issue trackers:</description>
    </item>
    
    <item>
      <title>API Docs | Annotorious OSD Plugin</title>
      <link>http://recogito.github.io/annotorious/api-docs/osd-plugin/</link>
      <pubDate>Sun, 17 May 2020 14:15:19 +0200</pubDate>
      
      <guid>http://recogito.github.io/annotorious/api-docs/osd-plugin/</guid>
      <description>API Reference: OpenSeadragon Plugin  The OpenSeadragon Plugin is an extension to the OpenSeadragon, zoomable image viewer. The API reference for the Annotorious standard version is available here.
 Initializing the Plugin Initialize Annotorious on an OpenSeadragon viewer instance with
var anno = OpenSeadragon.Annotorious(viewer, config); The config is optional, and must be an object with the following properties:
   Property Type Value Default     readOnly Boolean Set to true to display annotations read-only false   tagVocabulary Array A list of strings to use as a pre-defined tag vocabulary in the tagging widget -    Instance Methods .</description>
    </item>
    
    <item>
      <title>API Docs | Annotorious</title>
      <link>http://recogito.github.io/annotorious/api-docs/annotorious/</link>
      <pubDate>Sun, 17 May 2020 14:14:36 +0200</pubDate>
      
      <guid>http://recogito.github.io/annotorious/api-docs/annotorious/</guid>
      <description>API Reference: Annotorious  The standard version of Annotorious works on normal images embedded in websites or web applications. The API reference for the Annotorious OpenSeadragon plugin is available here.
 | Methods
Initializing Annotorious Initialize an Annotorious instance on an image with
var config = { image: document.getElementById(&amp;#39;my-image&amp;#39;), readOnly: true }; var anno = Annotorious.init(config); The config object can have the following properties:
   Property Type Value Default     image Element, String Image element or, alternatively, element ID.</description>
    </item>
    
  </channel>
</rss>
