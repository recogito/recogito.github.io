<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>recogito.github.io</title>
    <link>http://recogito.github.io/</link>
    <description>Recent content on recogito.github.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 18 Sep 2022 08:54:00 +0200</lastBuildDate><atom:link href="http://recogito.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Configuring the Editor</title>
      <link>http://recogito.github.io/guides/configuring-the-editor/</link>
      <pubDate>Thu, 24 Sep 2020 14:24:22 +0200</pubDate>
      
      <guid>http://recogito.github.io/guides/configuring-the-editor/</guid>
      <description>Customizing the Editor Per default, the Annotorious editor popup features two widgets:
A comment widget for writing comments and replies A tag widget for adding tags, either freetext or supported by a pre-configured vocabulary and an autosuggest dropdown You can can customize this setup when you initialize Annotorious/RecogitoJS using the widgets config option. The configuration below will give you the editor shown in the image above.
var anno = Annotorious.init({ image: &amp;#39;hallstatt&amp;#39;, widgets: [ &amp;#39;COMMENT&amp;#39;, { widget: &amp;#39;TAG&amp;#39;, vocabulary: [ &amp;#39;Animal&amp;#39;, &amp;#39;Building&amp;#39;, &amp;#39;Waterbody&amp;#39;] } ] }); Alternatively, the configuration below will give you an editor with just a comment widget, but no tag widget.</description>
    </item>
    
    <item>
      <title>Customizing Styles</title>
      <link>http://recogito.github.io/guides/customizing-styles/</link>
      <pubDate>Thu, 24 Sep 2020 10:47:22 +0200</pubDate>
      
      <guid>http://recogito.github.io/guides/customizing-styles/</guid>
      <description>Customizing Visual Appearance Need a different look and feel? Customizing the visual appearance of Annotorious is easy. All elements of the annotation layer and the editor popup can be styled with CSS.
Customizing Shape Styles Annotorious renders annotations using SVG. You can completely alter the visual appearance of every graphical element via CSS.
To make styling more flexible, Annotorious adds a few extras:
For every annotation shape, Annotorious renders two SVG shapes, exactly on top of each other.</description>
    </item>
    
    <item>
      <title>OpenSeadragon Plugin</title>
      <link>http://recogito.github.io/annotorious/getting-started/osd-plugin/</link>
      <pubDate>Mon, 01 Jun 2020 10:20:00 +0200</pubDate>
      
      <guid>http://recogito.github.io/annotorious/getting-started/osd-plugin/</guid>
      <description>Getting Started with the OpenSeadragon Plugin The Annotorious OpenSeadragon plugin is an extension to the OpenSeadragon viewer for zoomable high-resolution images. Click or tap the annotation to edit. Hold the SHIFT key while clicking and dragging the mouse to create a new annotation.
Download the latest release and include script and stylesheet file in your web page. Make sure to include the script after the OpenSeadragon script.
&amp;lt;!-- CSS stylesheet --&amp;gt; &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;annotorious.</description>
    </item>
    
    <item>
      <title>Headless Mode</title>
      <link>http://recogito.github.io/guides/headless-mode/</link>
      <pubDate>Sat, 03 Apr 2021 10:28:42 +0200</pubDate>
      
      <guid>http://recogito.github.io/guides/headless-mode/</guid>
      <description>Headless Mode: Using Annotorious without the Editor Popup Want to use Annotorious only for the drawing tools? But don&amp;rsquo;t need the editor? That&amp;rsquo;s what headless mode is for! In headless mode, you keep all the standard functionality: drawing and editing shapes, JavaScript API, lifecycle events. But you are free to build your own user interface, without being forced to the standard editor popup.
The demo uses headless mode to create annotations with either an Orange or Green tag, and a formatter to color the shapes.</description>
    </item>
    
    <item>
      <title>Web Annotation Model</title>
      <link>http://recogito.github.io/annotorious/getting-started/web-annotation/</link>
      <pubDate>Sun, 17 May 2020 14:33:09 +0200</pubDate>
      
      <guid>http://recogito.github.io/annotorious/getting-started/web-annotation/</guid>
      <description>The W3C Web Annotation Model Annotorious supports a subset of the W3C Web Annotation model, an open standard for interoperable annotations.
Only a single target shape per annotation is supported. FragmentSelectors of type Media Fragment are supported for rectangle shapes (see example below), with both pixel- and percent-encoded coordinates. SVG Selectors aer supported for polygon shapes (see example below). Annotation TextualBody types with a purpose of commenting, replying or no purpose are displayed as comments.</description>
    </item>
    
    <item>
      <title>Annotorious in Vue</title>
      <link>http://recogito.github.io/guides/annotorious-in-vue/</link>
      <pubDate>Sun, 18 Sep 2022 08:54:00 +0200</pubDate>
      
      <guid>http://recogito.github.io/guides/annotorious-in-vue/</guid>
      <description>Using Annotorious in Vue.js Below is a minimal example for using Annotorious in Vue.js. Thanks to Grant Brits for this contribution!
&amp;lt;template&amp;gt; &amp;lt;div&amp;gt; &amp;lt;img id=&amp;#34;plan&amp;#34; src=&amp;#34;img.png&amp;#34; style=&amp;#34;width: 100%; max-width: 1024px;&amp;#34; /&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/template&amp;gt; &amp;lt;script&amp;gt; import { Annotorious} from &amp;#39;@recogito/annotorious&amp;#39;; import &amp;#39;@recogito/annotorious/dist/annotorious.min.css&amp;#39;; export default { data() { return { anno: null } }, methods: { initAnno() { this.anno = new Annotorious({ image: document.getElementById(&amp;#34;plan&amp;#34;) }); this.anno.on(&amp;#39;createAnnotation&amp;#39;, function (annotation) { console.log(&amp;#39;Created annotation&amp;#39;, annotation); }); this.</description>
    </item>
    
    <item>
      <title>Annotorious in React</title>
      <link>http://recogito.github.io/guides/annotorious-in-react/</link>
      <pubDate>Sun, 25 Apr 2021 16:45:12 +0200</pubDate>
      
      <guid>http://recogito.github.io/guides/annotorious-in-react/</guid>
      <description>Using Annotorious in React At the moment, Annotorious doesn&amp;rsquo;t have native React integration (yet). If you want to use Annotorious in your own React project, there are a few things to consider:
Annotorious modifies the DOM directly: you need to use refs to access image DOM elements. Annotorious has an imperative API: wrapping it for React requires a few workarounds, including initialization in a useEffect hook, and storing the anno object in the component state.</description>
    </item>
    
    <item>
      <title>Storing Annotations</title>
      <link>http://recogito.github.io/annotorious/getting-started/storing-annotations/</link>
      <pubDate>Mon, 01 Jun 2020 10:20:00 +0200</pubDate>
      
      <guid>http://recogito.github.io/annotorious/getting-started/storing-annotations/</guid>
      <description>Storing Annotations Important: Annotorious does not provide a backend for storing annotations online. It provides user interface functionality only. To store annotations, you need to connect them to your own backend, using the JavaScript API.
When users create, update or delete annotations, Annotorious emits the following events:
createAnnotation updateAnnotation deleteAnnotation Subscribe to these events, and execute the corresponding write operations to your backend.
anno.on(&amp;#39;createAnnotation&amp;#39;, function(annotation) { // This part depends entirely on how your backend works axios.</description>
    </item>
    
    <item>
      <title>Firebase Storage Plugin</title>
      <link>http://recogito.github.io/guides/using-firebase-for-storage/</link>
      <pubDate>Fri, 01 May 2020 13:28:54 +0200</pubDate>
      
      <guid>http://recogito.github.io/guides/using-firebase-for-storage/</guid>
      <description>Using Firebase for Storage A quick and easy way to set up your own annotation store without managing your own server is through Firebase, a web application development platform by Google. Firebase includes a cloud-based document database with a JavaScript SDK for storing, updating and deleting JSON records. All you need to do is wire up the Firebase storage SDK operations with the corresponding events from Annotorious.
Firebase Storage Explained: Lifecycle Events &amp;amp; CRUD Operations The basic idea behind integrating Firebase is:</description>
    </item>
    
    <item>
      <title>Writing Editor Widgets</title>
      <link>http://recogito.github.io/guides/editor-widgets/</link>
      <pubDate>Thu, 24 Sep 2020 14:24:22 +0200</pubDate>
      
      <guid>http://recogito.github.io/guides/editor-widgets/</guid>
      <description>Writing Your Own Editor Widgets You can extend the editor with your own widgets. A widget can be:
an ordinary JavaScript function that takes a set of input arguments and returns a DOM element, which will be inserted into the editor a React component conforming to the same interface conventions as the built-in widgets. Before you start writing your own widgets, you should first familiarize yourself with the the W3C Web Annotation specification, in particular the concepts of annotation bodies and body purposes.</description>
    </item>
    
    <item>
      <title>React Editor Widget</title>
      <link>http://recogito.github.io/guides/example-react-widget/</link>
      <pubDate>Sat, 20 Feb 2021 10:28:42 +0200</pubDate>
      
      <guid>http://recogito.github.io/guides/example-react-widget/</guid>
      <description>An Example React Editor Widget In this guide, we re-recreate the example color selector widget from the previous tutorial as a React component. The widget adds a section to the editor with three buttons: red, green and blue. Clicking one of the buttons will set an annotation body with the color value, and body purpose of highlighting.
JSX code for the plugin is below. A full project (including a webpack build configuration) is available on GitHub.</description>
    </item>
    
    <item>
      <title>Contributing Translations</title>
      <link>http://recogito.github.io/guides/contributing-ui-translations/</link>
      <pubDate>Mon, 01 Jun 2020 20:04:18 +0200</pubDate>
      
      <guid>http://recogito.github.io/guides/contributing-ui-translations/</guid>
      <description>Contributing UI Translations We want to make the user interface available in as many languages as possible. If you want to help: providing a translation is easy - and because there are not many labeled elements, it&amp;rsquo;s not a lot of work.
Message Dictionaries User interface labels are part of recogito-client-core, a JavaScript package for common code shared between Annotorious and RecogitoJS. In this folder you will find messages files, one file for each available translation.</description>
    </item>
    
    <item>
      <title>Hacker&#39;s Guide</title>
      <link>http://recogito.github.io/guides/hackers-guide/</link>
      <pubDate>Thu, 04 Jun 2020 11:46:22 +0200</pubDate>
      
      <guid>http://recogito.github.io/guides/hackers-guide/</guid>
      <description>Hacker&amp;rsquo;s Guide to Annotorious and RecogitoJS We welcome pull requests to Annotorious and RecogitoJS - both to the code, as well as to our documentation! To contribute, simply fork the relevant repository and hack away. Our code is located in the following repositories
recogito/annotorious. Annotorious application entry point, SVG rendering and drawing tool base classes. recogito/annotorious-openseadragon. The OpenSeadragon plugin. Imports most functionality from annotorious and recogito-client-core. recogito/recogito-client-core. A base module that contains shared code for Annotorious and RecogitoJS, most importantly the code for the editor popup.</description>
    </item>
    
    <item>
      <title>Plugins</title>
      <link>http://recogito.github.io/annotorious/plugins/</link>
      <pubDate>Mon, 05 Apr 2021 10:09:57 +0200</pubDate>
      
      <guid>http://recogito.github.io/annotorious/plugins/</guid>
      <description>Plugins Plugins extend the functionality of Annotorious. The following plugins are currently available:
Annotorious Better Polygon A better polygon drawing tool for for Annotorious and Annotorious OpenSeadragon. Provides extra features not found in the built-in polygon tool, such as adding and removing points, closing the polygon by re-selecting the first point, and selecting/moving multiple corners.
Annotorious Selector Pack Additional selection tools for Annotorious and Annotorious OpenSeadragon: circle, ellipse and freehand drawing.</description>
    </item>
    
    <item>
      <title>Annotorious</title>
      <link>http://recogito.github.io/site/annotorious/</link>
      <pubDate>Fri, 12 Jun 2020 08:04:26 +0200</pubDate>
      
      <guid>http://recogito.github.io/site/annotorious/</guid>
      <description></description>
    </item>
    
    <item>
      <title>About</title>
      <link>http://recogito.github.io/annotorious/about/</link>
      <pubDate>Mon, 01 Jun 2020 17:48:46 +0200</pubDate>
      
      <guid>http://recogito.github.io/annotorious/about/</guid>
      <description>About Annotorious Annotorious is open source software licensed under the BSD 3-Clause license.
Source Code All source code is available on the recogito GitHub organization. The key repositories are:
recogito/annotorious Annotorious (standard version) recogito/annotorious-openseadragon Annotorious OpenSeadragon plugin recogito/recogito-client-core shared base components recogito/recogito-client-plugins plugins and extensions Need Help? Get in touch via the Annotorious Gitter chat. If you encounter bugs, or have feature requests, please report them via the GitHub issue trackers:</description>
    </item>
    
    <item>
      <title>API Docs | Annotorious OSD Plugin</title>
      <link>http://recogito.github.io/annotorious/api-docs/osd-plugin/</link>
      <pubDate>Sun, 17 May 2020 14:15:19 +0200</pubDate>
      
      <guid>http://recogito.github.io/annotorious/api-docs/osd-plugin/</guid>
      <description>API Reference: OpenSeadragon Plugin The OpenSeadragon Plugin is an extension to the OpenSeadragon zoomable image viewer. If you are looking for the standard version of Annotorious, which works with normal images embedded in websites, see here instead.
Initialization When included via &amp;lt;script&amp;gt; tag:
var anno = OpenSeadragon.Annotorious(viewer, config); With npm:
import OpenSeadragon from &amp;#39;openseadragon&amp;#39;; import * as Annotorious from &amp;#39;@recogito/annotorious-openseadragon&amp;#39;; import &amp;#39;@recogito/annotorious-openseadragon/dist/annotorious.min.css&amp;#39;; const viewer = OpenSeadragon({ id: &amp;#34;openseadragon&amp;#34;, tileSources: { type: &amp;#34;image&amp;#34;, url: &amp;#34;1280px-Hallstatt.</description>
    </item>
    
    <item>
      <title>API Docs | Annotorious</title>
      <link>http://recogito.github.io/annotorious/api-docs/annotorious/</link>
      <pubDate>Sun, 17 May 2020 14:14:36 +0200</pubDate>
      
      <guid>http://recogito.github.io/annotorious/api-docs/annotorious/</guid>
      <description>API Reference: Annotorious The standard version of Annotorious works with normal images embedded in websites or web applications. If you are looking for the Annotorious OpenSeadragon plugin, see here instead.
Initialization When included via &amp;lt;script&amp;gt; tag:
var config = { image: document.getElementById(&amp;#39;my-image&amp;#39;), readOnly: true }; var anno = Annotorious.init(config); With npm:
import { Annotorious } from &amp;#39;@recogito/annotorious&amp;#39;; import &amp;#39;@recogito/annotorious/dist/annotorious.min.css&amp;#39;; const config = { image: document.getElementById(&amp;#39;my-image&amp;#39;) } const anno = new Annotorious(config); The config object supports the following properties:</description>
    </item>
    
  </channel>
</rss>
